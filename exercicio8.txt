#include "stm32f4xx.h"

int main(void)
{

	RCC->AHB1ENR=0x00000087; //habilitando o clock dos GPIO
	RCC->APB2ENR|=1<<16; // habilita o clock do timer 9
	RCC->APB2ENR|=1<<17; // habilita o clock do timer 10
	RCC->APB2ENR|=1<<18; // habilita o clock do timer 11

	GPIOA->MODER|=0x28155501; // saídas definidas em PA0, PA4, PA5, PA6, PA7, PA8, PA9 e PA10
	GPIOC->MODER|=0x00000000; // entradas definidas em PC0 e PC1

	TIM9->PSC=16000-1;
	TIM9->ARR=200-1;
	TIM9->CR1 = 0x01 | TIM_CR1_ARPE; // ligando o timer 9

	TIM10->PSC=16000-1;
	TIM10->ARR=200-1;
	TIM10->CR1 = 0x01 | TIM_CR1_ARPE; // ligando o timer 10

	TIM11->PSC=16000-1;
	TIM11->ARR=200-1;
	TIM11->CR1 = 0x01 | TIM_CR1_ARPE; // ligando o timer 11

	int conta5=0, conta6=0, conta7=0;
	int bot1=0;
	int bot2=0;

	while (1)
	 {

		// teste dos botões
		if((GPIOC->IDR & 0x01)==0x01){ // testando o primeiro botão
			bot1++; // PC0
		}
		if((GPIOC->IDR & 0x02)==0x02){ // testando o segundo botão
			bot2++; // PC1
		}


		// timer 9 para código 5
		if(TIM9->SR & 0x01){ // testando se o timer contou
			     	 TIM9->SR &=~(0x01); // zerando o bit, limpando o flag do timer 9
			     	 conta5++;
			  if(conta5>16){
			     conta5=0;
			  }
		}
		// timer 10 pro código 6
		if(TIM10->SR & 0x01){ // testando se o timer contou
					 TIM10->SR &=~(0x01); // zerando o bit, limpando o flag do timer 10
					 conta6++;
			   if(conta6>16){
				  conta6=0;
					  }
				}
		// timer 11 pro código 7
		if(TIM11->SR & 0x01){ // testando se o timer contou
					TIM11->SR &=~(0x01); // zerando o bit, limpando o flag do timer 11
					conta7++;
				if(conta7>16){
					conta7=0;
					  }
				}


		// código 5 (liga e desliga vai e volta)
		if(bot1==0 && bot2==0){
			switch(conta5){
					case 1:
						GPIOA->ODR=0x0001; // PA0
						break;
					case 2:
						GPIOA->ODR=0x0010; // PA4
						break;
					case 3:
						GPIOA->ODR=0x0020; // PA5
						break;
					case 4:
						GPIOA->ODR=0x0040; // PA6
						break;
					case 5:
						GPIOA->ODR=0x0080; // PA7
						break;
					case 6:
						GPIOA->ODR=0x0100; // PA8
						break;
					case 7:
						GPIOA->ODR=0x0200; // PA9
						break;
					case 8:
						GPIOA->ODR=0x0400; // PA10
						break;
					case 9:
					    GPIOA->ODR=0x0400; // PA10
						break;
					case 10:
						GPIOA->ODR=0x0200; // PA9
						break;
					case 11:
						GPIOA->ODR=0x0100; // PA8
						break;
					case 12:
						GPIOA->ODR=0x0080; // PA7
						break;
					case 13:
						GPIOA->ODR=0x0040; // PA6
						break;
					case 14:
						GPIOA->ODR=0x0020; // PA5
						break;
					case 15:
						GPIOA->ODR=0x0010; // PA4
						break;
					case 16:
						GPIOA->ODR=0x0001; // PA0
						break;
					default:
						GPIOA->ODR=0x0001; // PA0 (começo)
						break;
					}

		}

		// código 6 (indo ligando e volta desligando)
		if(bot1==0 && bot2==1){
			switch(conta6){
					case 1:
						GPIOA->ODR=0x0001; // PA0
						break;
					case 2:
						GPIOA->ODR=0x0011; // PA4, PA0
						break;
					case 3:
						GPIOA->ODR=0x0031; // PA5, PA4, PA0
						break;
					case 4:
						GPIOA->ODR=0x0071; // PA6, PA5, PA4, PA0
						break;
					case 5:
						GPIOA->ODR=0x00F1; // PA7, PA6, PA5, PA4, PA0
						break;
					case 6:
						GPIOA->ODR=0x01F1; // PA8, PA7, PA6, PA5, PA4, PA0
						break;
					case 7:
						GPIOA->ODR=0x03F1; // PA9, PA8, PA7, PA6, PA5, PA4, PA0
						break;
					case 8:
						GPIOA->ODR=0x07F1; // PA10, PA9, PA8, PA7, PA6, PA5, PA4, PA0
						break;

					//desligando
					case 9:
					    GPIOA->ODR=0x03F1; // PA9, PA8, PA7, PA6, PA5, PA4, PA0
						break;
					case 10:
						GPIOA->ODR=0x01F1; // PA8, PA7, PA6, PA5, PA4, PA0
						break;
					case 11:
						GPIOA->ODR=0x00F1; // PA7, PA6, PA5, PA4, PA0
						break;
					case 12:
						GPIOA->ODR=0x0071; // PA6, PA5, PA4, PA0
						break;
					case 13:
						GPIOA->ODR=0x0031; // PA5, PA4, PA0
						break;
					case 14:
						GPIOA->ODR=0x0011; // PA4, PA0
						break;
					case 15:
						GPIOA->ODR=0x0001; // PA0
						break;
					case 16:
						GPIOA->ODR=0x0000; // PA10
						break;
					default:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;
					}

		}

		// código 7 (freestyle)
		if(bot1==1 && bot2==0){
				switch(conta7){
					case 1:
						GPIOA->ODR=0x0401; // PA0, PA10
						break;
					case 2:
						GPIOA->ODR=0x0611; // PA4, PA9, PA0, PA10
						break;
					case 3:
						GPIOA->ODR=0x0731; // PA5, PA8, PA4, PA9, PA0, PA10
						break;
					case 4:
						GPIOA->ODR=0x07F1; // PA6, PA7, PA5, PA8, PA4, PA9, PA0, PA10
						break;

						// segundo estágio
					case 5:
						GPIOA->ODR=0x0731; // PA5, PA8, PA4, PA9, PA0, PA10
						break;
					case 6:
						GPIOA->ODR=0x0611; // PA4, PA9, PA0, PA10
						break;
					case 7:
						GPIOA->ODR=0x0401; // PA0, PA10
						break;
					case 8:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;

						// terceiro estágio
					case 9:
						GPIOA->ODR=0x07F1; // PA6, PA7, PA5, PA8, PA4, PA9, PA0, PA10
						break;
					case 10:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;
					case 11:
						GPIOA->ODR=0x07F1; // PA6, PA7, PA5, PA8, PA4, PA9, PA0, PA10
						break;
					case 12:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;
					case 13:
						GPIOA->ODR=0x07F1; // PA6, PA7, PA5, PA8, PA4, PA9, PA0, PA10
						break;
					case 14:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;
					case 15:
						GPIOA->ODR=0x07F1; // PA6, PA7, PA5, PA8, PA4, PA9, PA0, PA10
						break;
					case 16:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;
					default:
						GPIOA->ODR=0x0000; // nenhum led ligado
						break;
				}
		}

	 }
}