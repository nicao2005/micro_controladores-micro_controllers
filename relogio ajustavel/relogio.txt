#include "stm32f4xx.h"
#define botaomin GPIOA->IDR & 0x01 // PA0
#define botaohora GPIOA->IDR & 0x02 // PA1

 // TODOS OS DISPLAYS UTILIZADOS SÃO ANODO!!!!!
int num[10]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
int hora[3]={0xC0, 0xF9, 0xA4};
int min[6]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92};

int min1=0, min2=0, hora1=0, hora2=0;
int controle=0, minutos=0;
int soltoumin=0, soltouhora=0;


void TIM1_UP_TIM10_IRQHandler(void){
    controle++;
    if(controle>3)
    controle=0;

    GPIOC->ODR &=~0x7F; // limpa sete bits GPIOC
    GPIOB->ODR|=0x0F; // desligando todos os displays
    // os displays ligam em 0 e desligam em 1

    switch(controle){
    case 0:
    GPIOC->ODR|=num[min1]; // move a info para display 0
    GPIOB->ODR &=~0x07; // ligando o display 0
    break;

    case 1:
    GPIOC->ODR|=min[min2]; // move a info para display 1
    GPIOB->ODR &=~0x0B; // ligando o display 1
    break;

    case 2:
    GPIOC->ODR|=num[hora1]; // move a info para display 2
    GPIOB->ODR &=~0x0D; // ligando o display 2
    break;

    case 3:
    GPIOC->ODR|=hora[hora2]; // move a info para display 3
    GPIOB->ODR &=~0x0E; // ligando o display 3
    break;
    }
    TIM10->SR &=~0x01;
}


void TIM1_TRG_COM_TIM11_IRQHandler(void){
	minutos++; // contando os segundos

	if(minutos%60==0){ // 1 minuto
		min1++;
		if(min1>9)
			min1=0;
	}
	if(minutos%600==0 || min1>9){ // 10 minutos
		min2++;
		if(min2>5)
			min2=0;
	}
	if(minutos%3600==0){ // 1 hora
		hora1++;
		if(hora1>9)
			hora1=0;
	}
	if(minutos%36000==0 || hora1>9){ // 10 horas
		hora2++;
		if(hora2>2)
			hora2=0;
	}
	if(hora2==2 && hora1==5){ // ajuste para 24 horas
		hora1=0;
		hora2=0;
	}

    TIM11->SR &=~0x01;
}


int main(void){
/*
* PA0 e PA1 são os botões
* PC0 - A
* PC1 - B
* PC2 - C
* PC3 - D
* PC4 - E
* PC5 - F
* PC6 - G
* PB0 - PB3 controlam os anodos
*/

    RCC->AHB1ENR=0x00000087;
    GPIOA->MODER|=0x28000000;
    GPIOB->MODER=0x0055;
    GPIOC->MODER=0x00055555;

    RCC->APB2ENR|=1<<17; // habilita o clock do timer 10
    TIM10->PSC=16000-1;
    TIM10->ARR=2-1;
    TIM10->CR1|=0x01;
    TIM10->DIER|=0x01; // habilita interrupçao do timer 10

    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 4); // priority 4
    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);


    // timer do debounce, não precisa de interrupção
    RCC->APB2ENR|=1<<16; // habilita o clock do timer 9
    TIM9->PSC=16000-1;
    TIM9->ARR=250-1;
    TIM9->CR1|=0x01; // ligando o timer 9


    RCC->APB2ENR|=1<<18; // habilita o clock do timer 11
    TIM11->PSC=16000-1;
    TIM11->ARR=1000-1; // período de 1 segundo
    TIM11->CR1|=0x01; // ligando o timer 11
    TIM11->DIER|=0x01; // habilita interrupçao do timer 11

    NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5); // priority 5
    NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);


 while (1)
 {
	 // ajuste dos minutos
	 if(botaomin && soltoumin==0){
		 soltoumin=1;
		 TIM9->CNT=0;
		 TIM9->SR &=~0x01;
		 min1++;

		 if(min1>9){
			 min1=0;
			 min2++;
			 if(min2>5)
				 min2=0;
		 }

	 	 while((TIM9->SR &=0x01)==0){};
	 }
	 if((GPIOA->IDR & 0x01)==0)
		 soltoumin=0;

	 // ajuste das horas
	 if(botaohora && soltouhora==0){
	     soltouhora=1;
	     TIM9->CNT=0;
	 	 TIM9->SR &=~0x01;
	 	 hora1++;

	 	 if(hora1>9){
	 		 hora1=0;
	 		 hora2++;
	 		 if(hora2>2)
	 			 hora2=0;
	 	 }
		 if(hora2==2 && hora1==5){ // ajuste para 24 horas
			hora1=0;
			hora2=0;
		 }

	 	 while((TIM9->SR &=0x01)==0){};
	 }
	 if((GPIOA->IDR & 0x02)==0)
	 	 soltouhora=0;

 }
}
